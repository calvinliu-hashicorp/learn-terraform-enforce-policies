# The restrict-terraform-version-SM policy enforces the usage of Terraform version within a Terraform Cloud workspace
# using a range of minimum and maximum allowed versions.

# https://developer.hashicorp.com/terraform/cloud-docs/api-docs/variable-sets#list-variables-in-a-variable-set
# This policy is written because Variable Set Data does not appear in Mock Files

### Import functions ###
import "tfrun"
import "http"
import "json"
import "tfplan/v2" as tfplan
import "varsets"

# Input Parameters
param tfc_api_key default "my_key_value"       // personal token
param varset default "varset-LY5YynEjJWHfxNBg" // Get this running a GET Here: https://app.terraform.io/api/v2/organizations/[org-name]]/varsets
param support_email default "calvin.liu@hashicorp.com"

### Run Time Variables ###
workspace_name = tfrun.workspace.name
organization = tfrun.organization.name

### Build GET Call ###
if (tfc_api_key == "my_key_value") {
	# print ("tfc_api_key has the default value!")
	res = varsets.data
} else {
	request = http.request("https://app.terraform.io/api/v2/varsets/" + varset + "/relationships/vars/")
	request = request.with_header("Authorization", "Bearer " + tfc_api_key)
	request = request.with_header("Content-Type", "application/json")

	##  Create a variable from the GET response and unmarshal to use selectors on keys.  ##
	resp = json.unmarshal(http.get(request).body)
	res = resp.data
}

# print("response: ", res)
#############################################

terraform_min = filter res as _, resource_changes {
	resource_changes.attributes.key is "terraform_min"
}

terraform_max = filter res as _, resource_changes {
	resource_changes.attributes.key is "terraform_max"
}

print("Value of terraform_min is:", terraform_min[0].attributes.value)
print("Value of terraform_max is:", terraform_max[0].attributes.value)

#This policy enforces the usage of Terraform version within a Terraform Cloud workspace using a range of minimum and maximum allowed versions

#Allowed versions variables
min_allowed_version = terraform_min[0].attributes.value
max_allowed_version = terraform_max[0].attributes.value
violations = 0

print("version", tfplan.terraform_version)

#Condition to check version
if (tfplan.terraform_version < min_allowed_version) {
	violations = 1
	print("You are using terraform version", tfplan.terraform_version, "which is outdated. Please use any version higher than or equal to", min_allowed_version)
}

if (tfplan.terraform_version > max_allowed_version) {
	violations = 1
	print("You are using terraform version", tfplan.terraform_version, "that is not supported. Allowed versions are [", min_allowed_version, "-", max_allowed_version, "]")
	print("Please contact Terraform support team using", support_email, ".")
}

# Policy to enforce the usage of Terraform version within a
# Terraform Cloud workspace using a range of minimum and maximum allowed versions.
main = rule {
	violations is 0
}
